{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,kBAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKMO,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCO,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAElC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GAEvC,YADAE,EAAAzB,GAAS0B,OAAOC,QAAQ,8BAI1B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAI/B1B,EAHiB0B,EAAI,EACAT,EAAQG,EAAOM,GAGjCC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBqB,EAAAzB,GAAS0B,OAAOK,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBqB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAqCK,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\nimport Notiflix from \"notiflix\";\n\nconst form = document.querySelector(\".form\");\nform.addEventListener(\"submit\", handleFormSubmit);\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure(\"Please enter valid numbers\");\n    return;\n  }\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const promiseDelay = delay + step * i;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n};\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","Number","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.d9358b99.js.map"}